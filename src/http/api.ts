/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * DevStage
 * OpenAPI spec version: 0.0.1
 */
export type PostSubscriptionsBody = {
  name: string;
  email: string;
  /** @nullable */
  referrer?: string | null;
};

export type PostSubscriptions201 = {
  subscriberId: string;
};

/**
 * @nullable
 */
export type GetInvitesSubscriberId302 = typeof GetInvitesSubscriberId302[keyof typeof GetInvitesSubscriberId302] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesSubscriberId302 = {
  null: 'null',
} as const;

export type GetSubscribersSubscriberIdRankingClicks200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingCount200 = {
  count: number;
};

export type GetSubscribersSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null;
};

export type GetRanking200RankingItem = {
  id: string;
  name: string;
  score: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};

export type PostMessagesBody = {
  message: string;
};

export type PostMessages201 = {
  response: string;
};

export type PostAdminLoginBody = {
  email: string;
  /** @minLength 8 */
  password: string;
};

export type PostAdminLogin200 = {
  accessToken: string;
};

export type PostAdminLogin401 = {
  error: string;
};

export type PostAdminRefresh200 = {
  accessToken: string;
};

export type PostAdminRefresh401 = {
  error: string;
};

export type PostAdminUsersBody = {
  email: string;
  /** @minLength 8 */
  password: string;
};

export type PostAdminUsers201 = {
  id: string;
  email: string;
};

export type PostAdminUsers403 = {
  error: string;
};

export type PostAdminUsers409 = {
  error: string;
};



/**
 * @summary Subscribes someone to the event
 */
export const getPostSubscriptionsUrl = () => {


  return `http://localhost:3333/subscriptions`
}

export const postSubscriptions = async (postSubscriptionsBody: PostSubscriptionsBody, options?: RequestInit): Promise<PostSubscriptions201> => {
  
  const res = await fetch(getPostSubscriptionsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSubscriptionsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Access invite link and redirects user
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string,) => {


  return `http://localhost:3333/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (subscriberId: string, options?: RequestInit): Promise<unknown> => {
  
  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: unknown = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscriber invite clicks count
 */
export const getGetSubscribersSubscriberIdRankingClicksUrl = (subscriberId: string,) => {


  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscribersSubscriberIdRankingClicks = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingClicks200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingClicksUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingClicks200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscriber invite count
 */
export const getGetSubscribersSubscriberIdRankingCountUrl = (subscriberId: string,) => {


  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscribersSubscriberIdRankingCount = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingCount200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingCountUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingCount200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get subscriber ranking position
 */
export const getGetSubscribersSubscriberIdRankingPositionUrl = (subscriberId: string,) => {


  return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`
}

export const getSubscribersSubscriberIdRankingPosition = async (subscriberId: string, options?: RequestInit): Promise<GetSubscribersSubscriberIdRankingPosition200> => {
  
  const res = await fetch(getGetSubscribersSubscriberIdRankingPositionUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscribersSubscriberIdRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {


  return `http://localhost:3333/ranking`
}

export const getRanking = async ( options?: RequestInit): Promise<GetRanking200> => {
  
  const res = await fetch(getGetRankingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Send a message to the AI chat
 */
export const getPostMessagesUrl = () => {


  return `http://localhost:3333/messages`
}

export const postMessages = async (postMessagesBody: PostMessagesBody, options?: RequestInit): Promise<PostMessages201> => {
  
  const res = await fetch(getPostMessagesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postMessagesBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostMessages201 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Login admin
 */
export const getPostAdminLoginUrl = () => {


  return `http://localhost:3333/admin/login`
}

export const postAdminLogin = async (postAdminLoginBody: PostAdminLoginBody, options?: RequestInit): Promise<PostAdminLogin200> => {
  
  const res = await fetch(getPostAdminLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAdminLoginBody,)
  }
)

  const data = await res.json() as PostAdminLogin200 | PostAdminLogin401

  if (!res.ok) {
    const errorData = data as PostAdminLogin401
    throw new Error(errorData.error || 'Erro desconhecido')
  }

  return data as PostAdminLogin200
}



/**
 * *Require cookie refreshToken*
 * @summary Refresh admin token
 */
export const getPostAdminRefreshUrl = () => {


  return `http://localhost:3333/admin/refresh`
}

export const postAdminRefresh = async ( options?: RequestInit): Promise<PostAdminRefresh200> => {
  
  const res = await fetch(getPostAdminRefreshUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostAdminRefresh200 = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Logout admin
 */
export const getPostAdminLogoutUrl = () => {


  return `http://localhost:3333/admin/logout`
}

export const postAdminLogout = async ( options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getPostAdminLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Create admin user *require superadmin*
 */
export const getPostAdminUsersUrl = () => {


  return `http://localhost:3333/admin/users`
}

export const postAdminUsers = async (postAdminUsersBody: PostAdminUsersBody, options?: RequestInit): Promise<PostAdminUsers201> => {
  
  const res = await fetch(getPostAdminUsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAdminUsersBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostAdminUsers201 = body ? JSON.parse(body) : {}

  return data
}



